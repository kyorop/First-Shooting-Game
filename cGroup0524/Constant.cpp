/*
c++においてはconst非所属オブジェクトは内部結合になってしまう。
それを外部結合にするにはexternをつければ良い。
ちなみに非所属オブジェクトというのは、関数の外で宣言されたオブジェクトのこと。

このようにヘッダファイル(Constant.h)と実装ファイル(Constant.cpp)を分けることで、定数に代入されている値を変えてもConstant.hをインクルードしているファイルが再コンパイルされない。
ファイル数が膨大になってきたら再コンパイルにかかる時間も今よりずっと大きくなってしまうので、この手法は意味がある。

再コンパイルが起こる理由
#includeはプリプロセッサ命令であり、コンパイルされる前に行われる処理である。
その処理内容はというと、続けて書いたファイル名の中身を、そこにそのままそっくり機械的に展開する(埋め込む)ことである。
そのため、あるヘッダファイルを変更すると、そのヘッダファイルをインクルードしていたファイル(コンパイル済)は変更前のヘッダ内容が埋め込まれたものだから、
変更されたヘッダをもう一度埋め込んでコンパイルする必要がある。
このような理由で、ヘッダを編集すると再コンパイルが起こる。
*/


//速さ定数
extern const int PLAYER_SPEED = 5;
extern const int ENEMY_SPEED = 3;
extern const int SHOT_SPEED = 3;
//画像サイズ定数
extern const int PLAYER_SIZE = 64;
extern const int ENEMY_SIZE = 64;
extern const int SHOT_SIZE = 16;